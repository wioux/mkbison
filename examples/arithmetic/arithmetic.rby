%token NUMBER

%left OP_PLUS OP_MINUS

%%

arithmetic:
  expression[x]
  { self.result = x }
;

expression :
  NUMBER
| addition
| subtraction
;

addition :
  expression[left] OP_PLUS expression[right]
  { left + right }
;

subtraction :
  expression[left] OP_MINUS expression[right]
  { left - right }
;

%%

class Arithmetic
  def lex
    # skip space
    while true
      while (c = self.read) && c =~ /\s/
      end

      if c == '#'
        while (char = self.read) && char != "\n"
        end
      else
        break
      end
    end

    case c
    when '0'..'9'
      number = c
      while (c = self.peak) && ('0'..'9').include?(c)
        number << self.read
      end

      self.lex_value = number.to_i
      return Tokens::NUMBER

    when '+'
      return Tokens::OP_PLUS

    when '-'
      return Tokens::OP_MINUS
    end

    nil
  end
end