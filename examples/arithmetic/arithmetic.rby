%token NUMBER
%token LPAREN
%token RPAREN

%left OP_PLUS  OP_MINUS
%left OP_TIMES OP_OVER

%%

arithmetic:
  expression[x]
  { self.result = x }
;

expression :
  NUMBER
| OP_MINUS expression[x]
  { -x }
| LPAREN expression[x] RPAREN
  { x }
| addition
| subtraction
| multiplication
| division
;

addition :
  expression[left] OP_PLUS expression[right]
  { left + right }
;

subtraction :
  expression[left] OP_MINUS expression[right]
  { left - right }
;

multiplication:
  expression[left] OP_TIMES expression[right]
  { left * right }
;

division:
  expression[left] OP_OVER expression[right]
  { left / right }
;

%%

class Arithmetic
  def lex
    c = read_over_whitespace
    case c
    when '0'..'9'
      number = read_integer(c)
      self.lex_value = number.to_i
      return Tokens::NUMBER

    when '+'
      return Tokens::OP_PLUS

    when '-'
      return Tokens::OP_MINUS

    when '*'
      return Tokens::OP_TIMES

    when '/'
      return Tokens::OP_OVER

    when '('
      return Tokens::LPAREN

    when ')'
      return Tokens::RPAREN

    else
      return nil
    end
  end
end
