
<% tokens.each_with_index do |token, i| -%>
%token <%= token.name %><%= "\t" * (4 - (token.name.length+7)/8)%><%= 300 + i %>
<% end %>


%define api.pure true
%define parse.error verbose
%parse-param { VALUE __actions }
%lex-param { VALUE __actions }
%locations

%{
#include <ruby.h>
#define YYSTYPE VALUE
%}

%code provides {
static int yylex(YYSTYPE *, YYLTYPE *, VALUE);
static void yyerror(YYLTYPE *, VALUE, const char *);
}

%%

<% rules.each do |rule| -%>
<%= rule.name %>:
<% rule.components.each_with_index do |seq, i| -%>
<%= "|\n" unless i.zero? -%>
<%= '  '+seq.elements.map(&:name).join(' ') unless seq.elements.empty? %>
  {
    rb_ivar_set(__actions, rb_intern("@_"), rb_ary_new3(2, INT2FIX(@$.first_line), INT2FIX(@$.first_column)));
<% seq.tags.each do |i, name| -%>
    rb_ivar_set(__actions, rb_intern("@<%= name %>"), rb_ary_new3(2, INT2FIX(@<%= i %>.first_line), INT2FIX(@<%= i %>.first_column)));
<% end -%>
    $$ = <%= seq.action_funcall('__actions') %>;
  }
<% end -%>
;

<% end -%>

%%

static VALUE c<%= name %>;
static VALUE c<%= name %>Tokens;
static VALUE c<%= name %>Actions;

static VALUE <%= uname %>_parse(VALUE);

void Init_<%= uname %>(void) {
  c<%= name %> = rb_define_class("<%= name %>", rb_cObject);
  c<%= name %>Tokens = rb_define_module_under(c<%= name %>, "Tokens");
  c<%= name %>Actions = rb_define_class_under(c<%= name %>, "Actions", rb_cObject);

<% tokens.each do |token| -%>
  rb_define_const(c<%= name %>Tokens, "<%= token.name %>", INT2FIX(<%= token.name %>));
<% end -%>

  rb_define_method(c<%= name %>, "parse", <%= uname %>_parse, 0);
}

VALUE <%= uname %>_parse(VALUE self) {
  VALUE actions = rb_funcall(c<%= name %>Actions, rb_intern("new"), 0);
  rb_funcall(actions, rb_intern("parser="), 1, self);
  if (yyparse(actions))
    return Qnil;
  return rb_funcall(actions, rb_intern("result"), 0);
}

static void yyerror(YYLTYPE *loc, VALUE actions, const char *msg) {
  VALUE parser = rb_funcall(actions, rb_intern("parser"), 0);
  rb_funcall(parser, rb_intern("error"), 3,
             rb_str_new_cstr(msg), 
             INT2FIX(loc->first_line), 
             INT2FIX(loc->first_column));
}

static int yylex(YYSTYPE *lval, YYLTYPE *lloc, VALUE actions) {
  VALUE parser, value, vtok;

  parser = rb_funcall(actions, rb_intern("parser"), 0);

  rb_funcall(parser, rb_intern("token_row="), 1, INT2FIX(lloc->last_line));
  rb_funcall(parser, rb_intern("token_col="), 1, INT2FIX(lloc->last_column));

  vtok = rb_funcall(parser, rb_intern("lex"), 0);
  value = rb_funcall(parser, rb_intern("lex_value"), 0);

  lloc->first_line = FIX2INT(rb_funcall(parser, rb_intern("token_row"), 0));
  lloc->first_column = FIX2INT(rb_funcall(parser, rb_intern("token_col"), 0));
  lloc->last_line = FIX2INT(rb_funcall(parser, rb_intern("row"), 0));
  lloc->last_column = FIX2INT(rb_funcall(parser, rb_intern("col"), 0));

  if (vtok == Qnil) {
    *lval = Qnil;
    return 0;
  }
  
  *lval = value;

  return FIX2INT(vtok);
}
