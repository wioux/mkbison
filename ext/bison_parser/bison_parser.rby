
%token IDENTIFIER
%token STRING
%token COLON
%token SEMICOLON
%token LBRACK
%token RBRACK
%token PIPE
%token HASH
%token DOUBLE_HASH
%token KW_TOKEN
%token ACTIONS

%%

grammar_file :
  token_list[tokens] DOUBLE_HASH grammar_rules[rules] optional_code[code]
  { self.result = Bison::GrammarFile.new(tokens, rules, code) }
;

optional_code :
  { nil }
|
  DOUBLE_HASH ACTIONS[actions]
  { actions }
;

token_list :
  { [] }
|
  token_list[list]
  HASH KW_TOKEN IDENTIFIER[name]
  { list << name }
;

grammar_rules:
  { [] }
|
  grammar_rules[list] grammar_rule[rule]
  { list << rule }
;

grammar_rule:
  IDENTIFIER[name] COLON components[components] SEMICOLON
  { Bison::Rule.new(name, components) }
;

components:
  { [] }
| component[component]
  { [component] }
|
  components[sequence] PIPE component[component]
  { sequence << component }
;


component:
  sequence
|
  sequence[sequence] ACTIONS[action]
  { sequence.tap do |s|; s.action = action; end }
;

sequence:
  { Bison::Sequence.new }
|
  sequence[sequence] IDENTIFIER[follower]
  { sequence << Bison::Nonterminal.new(follower) }
|
  sequence[sequence] IDENTIFIER[follower] LBRACK IDENTIFIER[tag] RBRACK
  { sequence << Bison::Nonterminal.new(follower, tag) }
;

